# Default values for corndogs.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
namespace: corndogs

image:
  repository: quay.io/tnlcommunity/corndogs
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 5080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

appconfig:
  loglevel: "error"
  prometheusEnabled: false

# timeoutCron optionally creates a cronjob to send CleanUpTimedOut requests using the cli
timeoutCron:
  enabled: false
  # schedule uses the typical cronjob schedule syntax
  # schedule:
  
  # address is the address to the corndogs service. Defaults to corndogs.fullname
  # address: corndogs

  # port is the port for the corndogs service. Defualts to the service port.
  # port: 5080

  # queue is optional and sets the queue in the CleanUpTimedOut request to limit what it affects.
  # queue: example

  # restartPolicy for the job created. Defaults to Never.
  # restartPolicy: Never


database:
  dbname: "postgres"
  host: "corndogs-postgresql"
  user: "postgres"
  password: "postgres"
  maxIdleConns: "10"
  maxOpenConns: "10"
  connMaxLifetimeSeconds: "3600"
  tls:
    enabled: false

postgresql:
  fullnameOverride: corndogs-postgresql
  enabled: true
  # this makes local dev and default installation smooth, but don't run this in production
  auth:
    enablePostgresUser: true
    postgresPassword: postgres
  tls:
    enabled: false
  # disable persistence by default
  primary:
    persistence:
      enabled: false